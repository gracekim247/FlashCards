{"ast":null,"code":"var _s = $RefreshSig$();\n//This file will contain the `Todo` component, \n//which will handle the display and management of the todo list.\n\n//import:\n//React\nimport React, { useState } from \"react\";\n//the necessary hooks and components from `react-redux`\nimport { useSelector, useDispatch } from \"react-redux\";\n//the actions from your `todoSlice`\nimport { addTodo, toggleComplete, deleteTodo } from \"./todoSlice\";\nconst Todo = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const todos = useSelector(state => state.todos);\n  const dispatch = useDispatch();\n  const handleInputChange = e => {\n    setText(e.target.value);\n  };\n  const handleAddTodo = () => {\n    if (text) {\n      dispatch(addTodo(text));\n      setText(\"\");\n    }\n  };\n  const handleToggleComplete = id => {\n    dispatch(toggleComplete(id));\n  };\n  const handleDeleteTodo = id => {\n    dispatch(deleteTodo(id));\n  };\n\n  /*return(\n     <div>\n        <h1>To-Do List</h1>\n        <input type=\"text\" value={text} placeholder=\"Enter a task\" onChange={handleInputChange} />{\" \"}\n        <button onClick={handleAddTodo}> Add </button>\n        <ul>\n           {todos.map((todo) => (\n              <li\n                 key={todo.id}\n                 style={{\n                    textDecoration: todo.completed ? \"line-through\" : \"none\",\n                 }}\n              >\n                 {todo.text}{\" \"}\n                 <button onClick={() => handleToggleComplete(todo.id)}>\n                    \n                    {todo.completed ? \"Mark Incomplete\" : \"Mark Complete\"}{\" \"}\n                 </button>{\" \"}\n                 <button onClick={() => handleDeleteTodo(todo.id)}> Delete </button>{\" \"}\n              </li>\n           ))}{\" \"}\n        </ul>{\" \"}\n     </div>\n  );*/\n};\n_s(Todo, \"+hoyeE+gjC6X+bOXNWEIq87Me3o=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["React","useState","useSelector","useDispatch","addTodo","toggleComplete","deleteTodo","Todo","_s","text","setText","todos","state","dispatch","handleInputChange","e","target","value","handleAddTodo","handleToggleComplete","id","handleDeleteTodo","_c","$RefreshReg$"],"sources":["/Users/gracekim/Desktop/SPEAKHIRE/todo-list/src/todo.js"],"sourcesContent":["//This file will contain the `Todo` component, \n//which will handle the display and management of the todo list.\n\n//import:\n//React\nimport React, { useState } from \"react\";\n//the necessary hooks and components from `react-redux`\nimport { useSelector, useDispatch } from \"react-redux\";\n//the actions from your `todoSlice`\nimport { addTodo, toggleComplete, deleteTodo } from \"./todoSlice\";\n\nconst Todo = () => {\n   const [text, setText] = useState(\"\");\n   const todos = useSelector((state) => state.todos);\n   const dispatch = useDispatch();\n\n   const handleInputChange = (e) => {\n      setText(e.target.value);\n   };\n\n   const handleAddTodo = () => {\n      if (text){\n         dispatch(addTodo(text));\n         setText(\"\");\n      }\n   };\n\n   const handleToggleComplete = (id) => {\n      dispatch(toggleComplete(id));\n   };\n\n   const handleDeleteTodo = (id) => {\n      dispatch(deleteTodo(id));\n   };\n\n   /*return(\n      <div>\n         <h1>To-Do List</h1>\n         <input type=\"text\" value={text} placeholder=\"Enter a task\" onChange={handleInputChange} />{\" \"}\n         <button onClick={handleAddTodo}> Add </button>\n         <ul>\n            {todos.map((todo) => (\n               <li\n                  key={todo.id}\n                  style={{\n                     textDecoration: todo.completed ? \"line-through\" : \"none\",\n                  }}\n               >\n                  {todo.text}{\" \"}\n                  <button onClick={() => handleToggleComplete(todo.id)}>\n                     \n                     {todo.completed ? \"Mark Incomplete\" : \"Mark Complete\"}{\" \"}\n                  </button>{\" \"}\n                  <button onClick={() => handleDeleteTodo(todo.id)}> Delete </button>{\" \"}\n               </li>\n            ))}{\" \"}\n         </ul>{\" \"}\n      </div>\n   );*/\n};\n\nexport default Todo;"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD;AACA,SAASC,OAAO,EAAEC,cAAc,EAAEC,UAAU,QAAQ,aAAa;AAEjE,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMU,KAAK,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACD,KAAK,CAAC;EACjD,MAAME,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,MAAMW,iBAAiB,GAAIC,CAAC,IAAK;IAC9BL,OAAO,CAACK,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IACzB,IAAIT,IAAI,EAAC;MACNI,QAAQ,CAACT,OAAO,CAACK,IAAI,CAAC,CAAC;MACvBC,OAAO,CAAC,EAAE,CAAC;IACd;EACH,CAAC;EAED,MAAMS,oBAAoB,GAAIC,EAAE,IAAK;IAClCP,QAAQ,CAACR,cAAc,CAACe,EAAE,CAAC,CAAC;EAC/B,CAAC;EAED,MAAMC,gBAAgB,GAAID,EAAE,IAAK;IAC9BP,QAAQ,CAACP,UAAU,CAACc,EAAE,CAAC,CAAC;EAC3B,CAAC;;EAED;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACZ,EAAA,CAhDID,IAAI;EAAA,QAEOL,WAAW,EACRC,WAAW;AAAA;AAAAmB,EAAA,GAHzBf,IAAI;AAkDV,eAAeA,IAAI;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}