{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  //default\n  //jsonplaceholder url doesn't have POST request\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://jsonplaceholder.typicode.com'\n  }),\n  tagTypes: ['Todos', 'Comments'],\n  endpoints: builder => ({\n    getTodos: builder.query({\n      query: () => '/posts',\n      providesTags: ['Todos']\n      //transformResponse: res => res.sort((a,b) => b.id - a.id)\n    }),\n    //___.mutation --> actually changing data\n    addTodo: builder.mutation({\n      query: todo => ({\n        url: '/posts',\n        method: 'POST',\n        //POST is used when updating the whole record\n        body: todo\n      }),\n      invalidatesTags: ['Todos']\n    }),\n    // updateTodo: builder.mutation({\n    //    query: (todo) => ({\n    //       url: `/posts/${todo.id}`,\n    //       method: 'PATCH', //PATCH is used when updating part of the record\n    //       body: todo\n    //    }),\n    //    invalidatesTags: ['Todos']\n    // }),\n    deleteTodo: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `/posts/${id}`,\n        method: 'DELETE'\n        //body: id\n      }),\n      invalidatesTags: ['Todos']\n    })\n    // getComments: builder.query({\n    //    query: () => '/comments',\n    //    providesTags: ['Comments']\n    // }),\n    // updateComment: builder.mutation({\n    //    query: (comment) => ({\n    //       url: `/comments/${comment.id}`,\n    //       method: 'PATCH', //PATCH is used when updating part of the record\n    //       body: comment\n    //    }),\n    //    invalidatesTags: ['Comment']\n    // }),\n    // deleteComment: builder.mutation({\n    //    query: ({ id }) => ({\n    //       url: `/comments/${id}`,\n    //       method: 'DELETE',\n    //       body: id\n    //    }),\n    //    invalidatesTags: ['Comment']\n    // }),\n  })\n});\nexport const {\n  useGetTodosQuery,\n  //use_____Query format\n  // useGetCommentsQuery,\n  useAddTodoMutation,\n  useUpdateTodoMutation,\n  useDeleteTodoMutation\n  // useAddCommentMutation,\n  // useUpdateCommentMutation,\n  // useDeleteCommentMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getTodos","query","providesTags","addTodo","mutation","todo","url","method","body","invalidatesTags","deleteTodo","id","useGetTodosQuery","useAddTodoMutation","useUpdateTodoMutation","useDeleteTodoMutation"],"sources":["/Users/gracekim/Desktop/SPEAKHIRE/todo-list/src/features/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n  \nexport const apiSlice = createApi({\n   reducerPath: 'api', //default\n   //jsonplaceholder url doesn't have POST request\n   baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }),\n   tagTypes: ['Todos', 'Comments'],\n   endpoints: (builder) => ({\n      getTodos: builder.query({\n         query: () => '/posts',\n         providesTags: ['Todos'],\n         //transformResponse: res => res.sort((a,b) => b.id - a.id)\n      }),\n      //___.mutation --> actually changing data\n      addTodo: builder.mutation({\n         query: (todo) => ({\n            url: '/posts',\n            method: 'POST', //POST is used when updating the whole record\n            body: todo\n         }),\n         invalidatesTags: ['Todos']\n      }),\n      // updateTodo: builder.mutation({\n      //    query: (todo) => ({\n      //       url: `/posts/${todo.id}`,\n      //       method: 'PATCH', //PATCH is used when updating part of the record\n      //       body: todo\n      //    }),\n      //    invalidatesTags: ['Todos']\n      // }),\n      deleteTodo: builder.mutation({\n         query: ({ id }) => ({\n            url: `/posts/${id}`,\n            method: 'DELETE',\n            //body: id\n         }),\n         invalidatesTags: ['Todos']\n      }),\n      // getComments: builder.query({\n      //    query: () => '/comments',\n      //    providesTags: ['Comments']\n      // }),\n      // updateComment: builder.mutation({\n      //    query: (comment) => ({\n      //       url: `/comments/${comment.id}`,\n      //       method: 'PATCH', //PATCH is used when updating part of the record\n      //       body: comment\n      //    }),\n      //    invalidatesTags: ['Comment']\n      // }),\n      // deleteComment: builder.mutation({\n      //    query: ({ id }) => ({\n      //       url: `/comments/${id}`,\n      //       method: 'DELETE',\n      //       body: id\n      //    }),\n      //    invalidatesTags: ['Comment']\n      // }),\n   })\n})\n\nexport const{\n   useGetTodosQuery, //use_____Query format\n   // useGetCommentsQuery,\n   useAddTodoMutation,\n   useUpdateTodoMutation,\n   useDeleteTodoMutation,\n   // useAddCommentMutation,\n   // useUpdateCommentMutation,\n   // useDeleteCommentMutation\n} = apiSlice"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,KAAK;EAAE;EACpB;EACAC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAuC,CAAC,CAAC;EAC9EC,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;EAC/BC,SAAS,EAAGC,OAAO,KAAM;IACtBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAEA,CAAA,KAAM,QAAQ;MACrBC,YAAY,EAAE,CAAC,OAAO;MACtB;IACH,CAAC,CAAC;IACF;IACAC,OAAO,EAAEJ,OAAO,CAACK,QAAQ,CAAC;MACvBH,KAAK,EAAGI,IAAI,KAAM;QACfC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QAAE;QAChBC,IAAI,EAAEH;MACT,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,OAAO;IAC5B,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,UAAU,EAAEX,OAAO,CAACK,QAAQ,CAAC;MAC1BH,KAAK,EAAEA,CAAC;QAAEU;MAAG,CAAC,MAAM;QACjBL,GAAG,EAAE,UAAUK,EAAE,EAAE;QACnBJ,MAAM,EAAE;QACR;MACH,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,OAAO;IAC5B,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACH,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,MAAK;EACTG,gBAAgB;EAAE;EAClB;EACAC,kBAAkB;EAClBC,qBAAqB;EACrBC;EACA;EACA;EACA;AACH,CAAC,GAAGtB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}