{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const apiSlice = createApi({\n  reducerPath: 'api',\n  //default\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://jsonplaceholder.typicode.com'\n  }),\n  tagTypes: ['Todos', 'Comments'],\n  endpoints: builder => ({\n    getTodos: builder.query({\n      query: () => '/todos',\n      transformResponse: res => res.sort((a, b) => b.id - a.id),\n      providesTags: ['Todos']\n    }),\n    getComments: builder.query({\n      query: () => '/comments',\n      providesTags: ['Comments']\n    }),\n    //___.mutation --> actually changing data\n    addTodo: builder.mutation({\n      query: todo => ({\n        url: '/todos',\n        method: 'POST',\n        //POST is used when updating the whole record\n        body: todo\n      }),\n      invalidatesTags: ['Todos']\n    }),\n    updateTodo: builder.mutation({\n      query: todo => ({\n        url: `/todos/${todo.id}`,\n        method: 'PATCH',\n        //PATCH is used when updating part of the record\n        body: todo\n      }),\n      invalidatesTags: ['Todos']\n    }),\n    deleteTodo: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `/todos/${id}`,\n        method: 'DELETE',\n        body: id\n      }),\n      invalidatesTags: ['Todos']\n    }),\n    /*addComment: builder.mutation({\n       query: (comment) => ({\n          url: '/comments',\n          method: 'POST', //POST is used when updating the whole record\n          body: comment\n       }),\n       invalidatesTags: ['Comment']\n    }),*/\n    updateComment: builder.mutation({\n      query: comment => ({\n        url: `/comments/${comment.id}`,\n        method: 'PATCH',\n        //PATCH is used when updating part of the record\n        body: comment\n      }),\n      invalidatesTags: ['Comment']\n    }),\n    deleteComment: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `/comments/${id}`,\n        method: 'DELETE',\n        body: id\n      }),\n      invalidatesTags: ['Comment']\n    })\n  })\n});\nexport const {\n  useGetTodosQuery,\n  //use_____Query format\n  useGetCommentsQuery,\n  useAddTodoMutation,\n  useUpdateTodoMutation,\n  useDeleteTodoMutation,\n  useAddCommentMutation,\n  useUpdateCommentMutation,\n  useDeleteCommentMutation\n} = apiSlice;","map":{"version":3,"names":["createApi","fetchBaseQuery","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getTodos","query","transformResponse","res","sort","a","b","id","providesTags","getComments","addTodo","mutation","todo","url","method","body","invalidatesTags","updateTodo","deleteTodo","updateComment","comment","deleteComment","useGetTodosQuery","useGetCommentsQuery","useAddTodoMutation","useUpdateTodoMutation","useDeleteTodoMutation","useAddCommentMutation","useUpdateCommentMutation","useDeleteCommentMutation"],"sources":["/Users/gracekim/Desktop/SPEAKHIRE/todo-list/src/features/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n  \nexport const apiSlice = createApi({\n   reducerPath: 'api', //default\n   baseQuery: fetchBaseQuery({ baseUrl: 'https://jsonplaceholder.typicode.com' }),\n   tagTypes: ['Todos', 'Comments'],\n   endpoints: (builder) => ({\n      getTodos: builder.query({\n         query: () => '/todos',\n         transformResponse: res => res.sort((a,b) => b.id - a.id),\n         providesTags: ['Todos']\n      }),\n      getComments: builder.query({\n         query: () => '/comments',\n         providesTags: ['Comments']\n      }),\n      //___.mutation --> actually changing data\n      addTodo: builder.mutation({\n         query: (todo) => ({\n            url: '/todos',\n            method: 'POST', //POST is used when updating the whole record\n            body: todo\n         }),\n         invalidatesTags: ['Todos']\n      }),\n      updateTodo: builder.mutation({\n         query: (todo) => ({\n            url: `/todos/${todo.id}`,\n            method: 'PATCH', //PATCH is used when updating part of the record\n            body: todo\n         }),\n         invalidatesTags: ['Todos']\n      }),\n      deleteTodo: builder.mutation({\n         query: ({ id }) => ({\n            url: `/todos/${id}`,\n            method: 'DELETE',\n            body: id\n         }),\n         invalidatesTags: ['Todos']\n      }),\n      /*addComment: builder.mutation({\n         query: (comment) => ({\n            url: '/comments',\n            method: 'POST', //POST is used when updating the whole record\n            body: comment\n         }),\n         invalidatesTags: ['Comment']\n      }),*/\n      updateComment: builder.mutation({\n         query: (comment) => ({\n            url: `/comments/${comment.id}`,\n            method: 'PATCH', //PATCH is used when updating part of the record\n            body: comment\n         }),\n         invalidatesTags: ['Comment']\n      }),\n      deleteComment: builder.mutation({\n         query: ({ id }) => ({\n            url: `/comments/${id}`,\n            method: 'DELETE',\n            body: id\n         }),\n         invalidatesTags: ['Comment']\n      }),\n   })\n})\n\nexport const{\n   useGetTodosQuery, //use_____Query format\n   useGetCommentsQuery,\n   useAddTodoMutation,\n   useUpdateTodoMutation,\n   useDeleteTodoMutation,\n   useAddCommentMutation,\n   useUpdateCommentMutation,\n   useDeleteCommentMutation\n} = apiSlice"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,KAAK;EAAE;EACpBC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAuC,CAAC,CAAC;EAC9EC,QAAQ,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC;EAC/BC,SAAS,EAAGC,OAAO,KAAM;IACtBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACrBA,KAAK,EAAEA,CAAA,KAAM,QAAQ;MACrBC,iBAAiB,EAAEC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAACC,CAAC,EAACC,CAAC,KAAKA,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAE,CAAC;MACxDC,YAAY,EAAE,CAAC,OAAO;IACzB,CAAC,CAAC;IACFC,WAAW,EAAEV,OAAO,CAACE,KAAK,CAAC;MACxBA,KAAK,EAAEA,CAAA,KAAM,WAAW;MACxBO,YAAY,EAAE,CAAC,UAAU;IAC5B,CAAC,CAAC;IACF;IACAE,OAAO,EAAEX,OAAO,CAACY,QAAQ,CAAC;MACvBV,KAAK,EAAGW,IAAI,KAAM;QACfC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QAAE;QAChBC,IAAI,EAAEH;MACT,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,OAAO;IAC5B,CAAC,CAAC;IACFC,UAAU,EAAElB,OAAO,CAACY,QAAQ,CAAC;MAC1BV,KAAK,EAAGW,IAAI,KAAM;QACfC,GAAG,EAAE,UAAUD,IAAI,CAACL,EAAE,EAAE;QACxBO,MAAM,EAAE,OAAO;QAAE;QACjBC,IAAI,EAAEH;MACT,CAAC,CAAC;MACFI,eAAe,EAAE,CAAC,OAAO;IAC5B,CAAC,CAAC;IACFE,UAAU,EAAEnB,OAAO,CAACY,QAAQ,CAAC;MAC1BV,KAAK,EAAEA,CAAC;QAAEM;MAAG,CAAC,MAAM;QACjBM,GAAG,EAAE,UAAUN,EAAE,EAAE;QACnBO,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAER;MACT,CAAC,CAAC;MACFS,eAAe,EAAE,CAAC,OAAO;IAC5B,CAAC,CAAC;IACF;AACN;AACA;AACA;AACA;AACA;AACA;AACA;IACMG,aAAa,EAAEpB,OAAO,CAACY,QAAQ,CAAC;MAC7BV,KAAK,EAAGmB,OAAO,KAAM;QAClBP,GAAG,EAAE,aAAaO,OAAO,CAACb,EAAE,EAAE;QAC9BO,MAAM,EAAE,OAAO;QAAE;QACjBC,IAAI,EAAEK;MACT,CAAC,CAAC;MACFJ,eAAe,EAAE,CAAC,SAAS;IAC9B,CAAC,CAAC;IACFK,aAAa,EAAEtB,OAAO,CAACY,QAAQ,CAAC;MAC7BV,KAAK,EAAEA,CAAC;QAAEM;MAAG,CAAC,MAAM;QACjBM,GAAG,EAAE,aAAaN,EAAE,EAAE;QACtBO,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAER;MACT,CAAC,CAAC;MACFS,eAAe,EAAE,CAAC,SAAS;IAC9B,CAAC;EACJ,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,MAAK;EACTM,gBAAgB;EAAE;EAClBC,mBAAmB;EACnBC,kBAAkB;EAClBC,qBAAqB;EACrBC,qBAAqB;EACrBC,qBAAqB;EACrBC,wBAAwB;EACxBC;AACH,CAAC,GAAGpC,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}